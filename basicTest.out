; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt.2 = private unnamed_addr constant [4 x i8] c"%g\0A\00"
@temp = private unnamed_addr constant [13 x i8] c"Hello World!\00"
@temp.3 = private unnamed_addr constant [13 x i8] c"Hello World!\00"
@temp.4 = private unnamed_addr constant [13 x i8] c"Hello World!\00"

declare i32 @printf(i8*, ...)

declare i8* @strcpy(i8*, i8*)

declare i8* @strcat(i8*, i8*)

declare i32 @strlen(i8*)

declare i8* @malloc(i32)

declare i32 @strcmp(i8*, i8*)

define i32 @main() {
entry:
  %s = alloca i8*
  %n = alloca i32
  %d = alloca double
  %t = alloca i1
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @temp, i32 0, i32 0))
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @temp.3, i32 0, i32 0), i8** %s
  %s1 = load i8*, i8** %s
  %tmp = call i32 @strcmp(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @temp.4, i32 0, i32 0), i8* %s1)
  %tmo = icmp eq i32 %tmp, 0
  %printf2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i1 %tmo)
  store i32 100, i32* %n
  br label %while

while:                                            ; preds = %while_body, %entry
  %n3 = load i32, i32* %n
  %tmp4 = icmp sgt i32 %n3, 0
  br i1 %tmp4, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %n5 = load i32, i32* %n
  %printf6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %n5)
  %n7 = load i32, i32* %n
  %tmp8 = sub i32 %n7, 30
  store i32 %tmp8, i32* %n
  br label %while

while_end:                                        ; preds = %while
  %printf9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 -4)
  store double 3.141590e+00, double* %d
  %d10 = load double, double* %d
  %tmp11 = fmul double %d10, 1.000000e+02
  %printf12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.2, i32 0, i32 0), double %tmp11)
  %d13 = load double, double* %d
  %tmp14 = fdiv double %d13, 1.000000e+02
  %printf15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.2, i32 0, i32 0), double %tmp14)
  %n16 = load i32, i32* %n
  %tmp17 = icmp sgt i32 %n16, 0
  store i1 %tmp17, i1* %t
  %t18 = load i1, i1* %t
  %printf19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i1 %t18)
  ret i32 0
}
