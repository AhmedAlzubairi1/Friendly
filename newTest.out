; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00"

declare i32 @printf(i8*, ...)

define i32 @adding(i32 %a, i32 %b) {
entry:
  %a1 = alloca i32
  store i32 %a, i32* %a1
  %b2 = alloca i32
  store i32 %b, i32* %b2
  %a3 = load i32, i32* %a1
  %b4 = load i32, i32* %b2
  %tmp = sdiv i32 %a3, %b4
  ret i32 %tmp
}

define i32 @main() {
entry:
  %x = alloca i32
  %c = alloca i32
  %d = alloca i32
  store i32 20, i32* %x
  store i32 3, i32* %c
  %c1 = load i32, i32* %c
  %x2 = load i32, i32* %x
  %adding_result = call i32 @adding(i32 %x2, i32 %c1)
  store i32 %adding_result, i32* %d
  %d3 = load i32, i32* %d
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i32 %d3)
  %c4 = load i32, i32* %c
  %x5 = load i32, i32* %x
  %adding_result6 = call i32 @adding(i32 %x5, i32 %c4)
  %printf7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i32 %adding_result6)
  %c8 = load i32, i32* %c
  %x9 = load i32, i32* %x
  %adding_result10 = call i32 @adding(i32 %x9, i32 %c8)
  %tmp = add i32 %adding_result10, 5
  %printf11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i32 %tmp)
  ret i32 0
}
